import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView, TextInput } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Mic, MicOff, MapPin, Send, Camera, FileText, Globe } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default function ReportScreen() {
  const [isRecording, setIsRecording] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('hindi');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [location, setLocation] = useState('‡§∂‡§ø‡§Æ‡§≤‡§æ, ‡§π‡§ø‡§Æ‡§æ‡§ö‡§≤ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂');
  const [transcription, setTranscription] = useState('');
  const [aiAnalysis, setAiAnalysis] = useState(null);

  const languages = [
    { code: 'hindi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'punjabi', name: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä', flag: 'üáÆüá≥' },
    { code: 'gujarati', name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', flag: 'üáÆüá≥' },
    { code: 'marathi', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥' },
    { code: 'tamil', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥' },
    { code: 'english', name: 'English', flag: 'üá¨üáß' }
  ];

  const categories = [
    { id: 'roads', name: '‡§∏‡§°‡§º‡§ï ‡§î‡§∞ ‡§™‡§∞‡§ø‡§µ‡§π‡§®', icon: 'üõ£Ô∏è', color: '#FF6B6B' },
    { id: 'water', name: '‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø', icon: 'üíß', color: '#4ECDC4' },
    { id: 'electricity', name: '‡§¨‡§ø‡§ú‡§≤‡•Ä', icon: '‚ö°', color: '#FFE66D' },
    { id: 'garbage', name: '‡§ï‡§ö‡§∞‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®', icon: 'üóëÔ∏è', color: '#95E1D3' },
    { id: 'healthcare', name: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ', icon: 'üè•', color: '#F38BA8' },
    { id: 'education', name: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ', icon: 'üìö', color: '#A8DADC' },
    { id: 'other', name: '‡§Ö‡§®‡•ç‡§Ø', icon: 'üìã', color: '#B19CD9' }
  ];

  const startRecording = () => {
    setIsRecording(true);
    // Simulate AI voice processing
    setTimeout(() => {
      const mockTranscriptions = [
        '‡§π‡§Æ‡§æ‡§∞‡•á ‡§á‡§≤‡§æ‡§ï‡•á ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§¨‡§π‡•Å‡§§ ‡§ï‡§Æ‡•Ä ‡§π‡•à‡•§ ‡§®‡§≤ ‡§∏‡•á ‡§™‡§æ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§',
        '‡§∏‡§°‡§º‡§ï ‡§™‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ó‡§°‡•ç‡§¢‡•á ‡§π‡•à‡§Ç‡•§ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§®‡§æ ‡§Æ‡•Å‡§∂‡•ç‡§ï‡§ø‡§≤ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡•á ‡§ó‡§°‡•ç‡§¢‡•á ‡§≠‡§∞‡§µ‡§æ ‡§¶‡•Ä‡§ú‡§ø‡§è‡•§',
        '‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§ï‡§à ‡§¨‡§æ‡§∞ ‡§ï‡§ü ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§ ‡§á‡§∏‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§'
      ];
      const randomTranscription = mockTranscriptions[Math.floor(Math.random() * mockTranscriptions.length)];
      setTranscription(randomTranscription);
      
      // AI Analysis
      const analysis = {
        category: 'water',
        sentiment: 'negative',
        priority: 'high',
        confidence: 0.89,
        keywords: ['‡§™‡§æ‡§®‡•Ä', '‡§ï‡§Æ‡•Ä', '‡§®‡§≤', '‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ']
      };
      setAiAnalysis(analysis);
      setSelectedCategory('water');
      setIsRecording(false);
    }, 3000);
  };

  const stopRecording = () => {
    setIsRecording(false);
  };

  const submitReport = () => {
    if (!transcription || !selectedCategory) {
      Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç');
      return;
    }

    Alert.alert(
      '‡§∏‡§´‡§≤‡§§‡§æ!',
      '‡§Ü‡§™‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§π‡§Æ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§á‡§∏ ‡§™‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§',
      [{ text: '‡§†‡•Ä‡§ï ‡§π‡•à' }]
    );

    // Reset form
    setTranscription('');
    setSelectedCategory('');
    setAiAnalysis(null);
  };

  return (
    <SafeAreaView style={styles.container}>
      <LinearGradient
        colors={['#FF9933', '#FFFFFF']}
        style={styles.header}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <Text style={styles.headerTitle}>‡§Æ‡•Å‡§¶‡•ç‡§¶‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç</Text>
        <Text style={styles.headerSubtitle}>‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§≤‡§æ‡§è‡§Ç</Text>
      </LinearGradient>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Language Selection */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.languageScroll}>
            {languages.map((lang) => (
              <TouchableOpacity
                key={lang.code}
                style={[
                  styles.languageButton,
                  selectedLanguage === lang.code && styles.languageButtonActive
                ]}
                onPress={() => setSelectedLanguage(lang.code)}
              >
                <Text style={styles.languageFlag}>{lang.flag}</Text>
                <Text style={[
                  styles.languageText,
                  selectedLanguage === lang.code && styles.languageTextActive
                ]}>
                  {lang.name}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* Voice Recording */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó</Text>
          <View style={styles.recordingContainer}>
            <TouchableOpacity
              style={[styles.recordButton, isRecording && styles.recordButtonActive]}
              onPress={isRecording ? stopRecording : startRecording}
            >
              <LinearGradient
                colors={isRecording ? ['#FF4757', '#FF6B6B'] : ['#FF9933', '#FF6B6B']}
                style={styles.recordButtonGradient}
              >
                {isRecording ? (
                  <MicOff size={40} color="#fff" />
                ) : (
                  <Mic size={40} color="#fff" />
                )}
              </LinearGradient>
            </TouchableOpacity>
            <Text style={styles.recordingText}>
              {isRecording ? '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...' : '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡§¨‡§æ‡§è‡§Ç'}
            </Text>
          </View>
        </View>

        {/* Transcription */}
        {transcription ? (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂</Text>
            <TextInput
              style={styles.transcriptionInput}
              value={transcription}
              onChangeText={setTranscription}
              multiline
              placeholder="‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡§π‡§æ‡§Å ‡§¶‡§ø‡§ñ‡•á‡§ó‡§æ..."
            />
          </View>
        ) : null}

        {/* AI Analysis */}
        {aiAnalysis ? (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>AI ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£</Text>
            <View style={styles.analysisCard}>
              <View style={styles.analysisRow}>
                <Text style={styles.analysisLabel}>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä:</Text>
                <Text style={styles.analysisValue}>‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø</Text>
              </View>
              <View style={styles.analysisRow}>
                <Text style={styles.analysisLabel}>‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ:</Text>
                <Text style={[styles.analysisValue, { color: '#FF6B6B' }]}>‡§â‡§ö‡•ç‡§ö</Text>
              </View>
              <View style={styles.analysisRow}>
                <Text style={styles.analysisLabel}>‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø‡§§‡§æ:</Text>
                <Text style={styles.analysisValue}>{Math.round(aiAnalysis.confidence * 100)}%</Text>
              </View>
            </View>
          </View>
        ) : null}

        {/* Category Selection */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç</Text>
          <View style={styles.categoriesGrid}>
            {categories.map((category) => (
              <TouchableOpacity
                key={category.id}
                style={[
                  styles.categoryCard,
                  selectedCategory === category.id && styles.categoryCardActive,
                  { borderColor: category.color }
                ]}
                onPress={() => setSelectedCategory(category.id)}
              >
                <Text style={styles.categoryIcon}>{category.icon}</Text>
                <Text style={styles.categoryName}>{category.name}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        {/* Location */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‡§∏‡•ç‡§•‡§æ‡§®</Text>
          <View style={styles.locationCard}>
            <MapPin size={20} color="#FF9933" />
            <Text style={styles.locationText}>{location}</Text>
          </View>
        </View>

        {/* Submit Button */}
        <TouchableOpacity style={styles.submitButton} onPress={submitReport}>
          <LinearGradient
            colors={['#138808', '#4ECDC4']}
            style={styles.submitGradient}
          >
            <Send size={20} color="#fff" />
            <Text style={styles.submitText}>‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç</Text>
          </LinearGradient>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  header: {
    paddingHorizontal: 20,
    paddingVertical: 30,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#fff',
    marginTop: 4,
    opacity: 0.9,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginTop: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  languageScroll: {
    marginBottom: 8,
  },
  languageButton: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
    marginRight: 12,
    alignItems: 'center',
    minWidth: 80,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  languageButtonActive: {
    borderColor: '#FF9933',
    backgroundColor: '#FFF5E6',
  },
  languageFlag: {
    fontSize: 20,
    marginBottom: 4,
  },
  languageText: {
    fontSize: 12,
    color: '#666',
    fontWeight: '600',
  },
  languageTextActive: {
    color: '#FF9933',
  },
  recordingContainer: {
    alignItems: 'center',
    paddingVertical: 20,
  },
  recordButton: {
    width: 100,
    height: 100,
    borderRadius: 50,
    overflow: 'hidden',
    marginBottom: 16,
  },
  recordButtonActive: {
    transform: [{ scale: 1.1 }],
  },
  recordButtonGradient: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  recordingText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  transcriptionInput: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    minHeight: 100,
    textAlignVertical: 'top',
    fontSize: 16,
    color: '#333',
  },
  analysisCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  analysisRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  analysisLabel: {
    fontSize: 14,
    color: '#666',
    fontWeight: '600',
  },
  analysisValue: {
    fontSize: 14,
    color: '#333',
    fontWeight: '600',
  },
  categoriesGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  categoryCard: {
    backgroundColor: '#fff',
    width: '48%',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#E5E5E5',
  },
  categoryCardActive: {
    backgroundColor: '#FFF5E6',
  },
  categoryIcon: {
    fontSize: 32,
    marginBottom: 8,
  },
  categoryName: {
    fontSize: 12,
    color: '#333',
    fontWeight: '600',
    textAlign: 'center',
  },
  locationCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    flexDirection: 'row',
    alignItems: 'center',
  },
  locationText: {
    fontSize: 16,
    color: '#333',
    marginLeft: 8,
    fontWeight: '600',
  },
  submitButton: {
    marginTop: 32,
    marginBottom: 100,
    borderRadius: 12,
    overflow: 'hidden',
  },
  submitGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
  },
  submitText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 8,
  },
});